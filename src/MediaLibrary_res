module MediaType = {
  type t

  @module("expo-media-library") @scope("MediaType")
  external photo: t = "photo"

  @module("expo-media-library") @scope("MediaType")
  external video: t = "video"

  @module("expo-media-library") @scope("MediaType")
  external audio: t = "audio"

  @module("expo-media-library") @scope("MediaType")
  external unknown: t = "unknown"
}

module SortBy = {
  type t

  @module("expo-media-library") @scope("SortBy")
  external default: t = "default"

  @module("expo-media-library") @scope("SortBy") external id: t = "id"

  @module("expo-media-library") @scope("SortBy")
  external creationTime: t = "creationTime"

  @module("expo-media-library") @scope("SortBy")
  external modificationTime: t = "modificationTime"

  @module("expo-media-library") @scope("SortBy")
  external mediaType: t = "mediaType"

  @module("expo-media-library") @scope("SortBy")
  external width: t = "width"

  @module("expo-media-library") @scope("SortBy")
  external height: t = "height"

  @module("expo-media-library") @scope("SortBy")
  external duration: t = "duration"
}

type rec asset<'exif> = {
  id: string,
  filename: string,
  uri: string,
  mediaType: MediaType.t,
  width: float,
  height: float,
  creationTime: float,
  modificationTime: float,
  duration: float,
  mediaSubtypes: array<string>,
  albumId: string,
  localUri: string,
  location: Js.Nullable.t<location>,
  exif: 'exif,
  orientation: float,
  isFavorite: bool,
}
and location = {
  latitude: float,
  longitude: float,
}

type rec album = {
  id: string,
  title: string,
  assetCount: int,
  @as("type")
  type_: string,
  startTime: float,
  endTime: float,
  approximateLocation: Js.Nullable.t<approximateLocation>,
  locationNames: array<string>,
}
and approximateLocation = {
  latitude: float,
  longitude: float,
}

@module("expo-media-library")
external createAssetAsync: string => Js.Promise.t<asset<'exif>> = "createAssetAsync"

module AlbumOption = {
  type t = [#ID(string) | #Album(album)]

  type rawSourceJS
  external rawSourceJS: 'a => rawSourceJS = "%identity"

  let encodeSource = (src: t) =>
    switch src {
    | #ID(id) => rawSourceJS(id)
    | #Album(album) => rawSourceJS(album)
    }
}
type getAssetsAsyncProps = {
  first: int,
  after: string,
  album: AlbumOption.rawSourceJS,
  sortBy: array<SortBy.t>,
  mediaType: array<MediaType.t>,
}

type getAssetsAsyncResponse<'exif> = {
  assets: array<asset<'exif>>,
  endCursor: string,
  hasNextPage: bool,
  totalCount: int,
}

@module("expo-media-library")
external _getAssetsAsync: getAssetsAsyncProps => Js.Promise.t<getAssetsAsyncResponse<'exif>> =
  "getAssetsAsync"

module AssetOption = {
  type t = [#ID(string) | #Asset(asset<{.}>)]

  type rawSourceJS
  external rawSourceJS: 'a => rawSourceJS = "%identity"

  let encodeSource = (src: t) =>
    switch src {
    | #ID(id) => rawSourceJS(id)
    | #Asset(asset) => rawSourceJS(asset)
    }
}

@module("expo-media-library")
external _getAssetInfoAsync: AssetOption.rawSourceJS => Js.Promise.t<asset<'exif>> =
  "getAssetInfoAsync"

let getAssetInfoAsync = asset => _getAssetInfoAsync(AssetOption.encodeSource(asset))

@module("expo-media-library")
external _deleteAssetsAsync: array<AssetOption.rawSourceJS> => Js.Promise.t<bool> =
  "deleteAssetsAsync"

let deleteAssetsAsync = assets =>
  _deleteAssetsAsync(Array.map(a => AssetOption.encodeSource(a), assets))

@module("expo-media-library")
external getAlbumsAsync: unit => Js.Promise.t<array<album>> = "getAlbumsAsync"

@module("expo-media-library")
external getAlbumAsync: string => Js.Promise.t<Js.Nullable.t<album>> = "getAlbumAsync"

@module("expo-media-library")
external _createAlbumAsync: (string, AlbumOption.rawSourceJS, bool) => Js.Promise.t<album> =
  "createAlbumAsync"

let createAlbumAsync = (albumName, asset, copyAsset) =>
  _createAlbumAsync(albumName, AlbumOption.encodeSource(asset), copyAsset)

@module("expo-media-library")
external _deleteAlbumsAsync: (array<AlbumOption.rawSourceJS>, bool) => Js.Promise.t<bool> =
  "deleteAlbumsAsync"

let deleteAlbumsAsync = (albums, deleteAssets) =>
  _deleteAlbumsAsync(Array.map(a => AlbumOption.encodeSource(a), albums), deleteAssets)

@module("expo-media-library")
external _addAssetsToAlbumAsync: (
  array<asset<'exif>>,
  array<AlbumOption.rawSourceJS>,
  bool,
) => Js.Promise.t<bool> = "addAssetsToAlbumAsync"

let addAssetsToAlbumAsync = (assets, albums, deleteAssets) =>
  _addAssetsToAlbumAsync(assets, Array.map(a => AlbumOption.encodeSource(a), albums), deleteAssets)

@module("expo-media-library")
external _removeAssetsFromAlbumAsync: (
  array<asset<'exif>>,
  array<AlbumOption.rawSourceJS>,
) => Js.Promise.t<bool> = "removeAssetsFromAlbumAsync"

let removeAssetsFromAlbumAsync = (assets, albums) =>
  _removeAssetsFromAlbumAsync(assets, Array.map(a => AlbumOption.encodeSource(a), albums))

@module("expo-media-library")
external getMomentsAsync: unit => Js.Promise.t<array<album>> = "getMomentsAsync"



@module("expo-media-library")
external addListener: ((array<asset<'a>>, array<asset<'a>>) => unit) => eventSubscription =
  "addListener"

@module("expo-media-library")
external removeAllListeners: unit => unit = "removeAllListeners"
